### Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?




### Solution Brute Force

Intuition
The problem requires finding two indices in an array such that the values at these indices sum up to a given target. One approach could be to iterate through the array and for each element, check if the complement (target - element) exists in the array. If it does, return the indices of the current element and the complement.

Approach
Create a HashMap to store each number's index.
Iterate through the array nums using a for loop.
For each number nums[i], calculate the difference needed to reach the target: int diff = target - nums[i];
Check if the difference diff exists in the HashMap using map.containsKey(diff).
If it exists, return an array containing the index of the difference (map.get(diff)) and the current index i.
If it doesn't exist, add the current number and its index to the HashMap using map.put(nums[i], i).
If no solution is found after iterating through the entire array, return null.
This approach has a time complexity of O(n), where n is the number of elements in the array nums, because it iterates through the array once and uses a HashMap for constant time lookup.

Complexity
Time complexity:O(n)O(n)O(n)
Space complexity:O(n)O(n)O(n)
